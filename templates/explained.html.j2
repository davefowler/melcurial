{% extends "base.html.j2" %}
{% set title = "Explained — how mel works" %}
{% set active = 'explained' %}

{% block content %}
  <h1>How mel works</h1>
  <p>No good abstraction should be without a full explanation of what has been abstracted. If you're an engineer or AI trying to figure your way out of some confusing scenario, hopefully this information can help:</p>

  <p>This documentation explains what each mel command is doing under the hood, and you can get the same help by simply running <code>mel explain &lt;command&gt;</code>.</p>

  <h2 id="config">what mel is</h2>
  <p>Mel is a simple python script that runs ontop of git.  It's not its own version control system, it just makes git easier to use with simpler commands, wording and focus on the majority workflow.</p>

  <p>This means that if you ever get stuck, you can always fall back to git commands.</p>

  <h2 id="b">b / branch</h2>
  <p>Creates or switches to your personal workspace branch off the latest <code>main</code> and sets upstream. See <a href="./config.html#main">main</a>.</p>
  <pre><code class="language-bash"># Equivalent git
git fetch origin                         # if origin exists
git checkout -B &lt;your-branch&gt; origin/&lt;main&gt;  # or just &lt;main&gt; without origin
git push -u origin HEAD</code></pre>

  <h2 id="save">save</h2>
  <p>Commits all changes, updates your branch with the latest <code>main</code>, then pushes. Confirmation before adding files can be controlled with <a href="./config.html#require_add_confirmation">require_add_confirmation</a>. Update behavior uses rebase by default (see <a href="./config.html#update_strategy">update_strategy</a>).</p>
  <pre><code class="language-bash"># Equivalent git (default rebase)
git add -A
git commit -m "mel save @ &lt;timestamp&gt;"
git fetch origin
git rebase origin/&lt;main&gt;
git push</code></pre>
  <p class="note">If you set <code>update_strategy</code> to <code>merge</code>, mel will fast‑forward merge instead of rebase:</p>
  <pre><code class="language-bash"># Alternative when update_strategy = "merge"
git add -A && git commit -m "mel save @ &lt;ts&gt;"
git fetch origin
git merge --ff-only origin/&lt;main&gt;
git push</code></pre>

  <h2 id="update">update</h2>
  <p>Alias for <code>sync</code>. If you have uncommitted changes, mel will prompt to save or stash first, then update your branch from latest <code>main</code> via <a href="./config.html#update_strategy">update_strategy</a>.</p>
  <pre><code class="language-bash"># Rebase strategy (default)
git fetch origin
git rebase origin/&lt;main&gt;

# Merge strategy
git fetch origin
git merge origin/&lt;main&gt;</code></pre>

  <h2 id="publish">publish</h2>
  <p>Confirms, then fast‑forward merges your workspace branch into <code>main</code>, pushes <code>main</code>, rebases your branch back on top, pushes the branch, and runs hooks. Confirmation can be disabled via <a href="./config.html#require_publish_confirmation">require_publish_confirmation</a>. Teams should run tests via scripts or <a href="./config.html#hooks">pre_publish</a> hooks.</p>
  <pre><code class="language-bash"># Equivalent git (happy path)
# pre‑publish: run tests (project‑specific)
git checkout &lt;main&gt;
git pull --ff-only origin &lt;main&gt;
git merge --ff-only &lt;your-branch&gt;
git push origin &lt;main&gt;
git checkout &lt;your-branch&gt;
git rebase origin/&lt;main&gt;
git push</code></pre>

  <h2 id="status">status</h2>
  <p>Shows ahead/behind versus <code>main</code>, dirty files, last commit summary, and then prints <code>git status</code>.</p>

  <h2 id="reset">reset</h2>
  <p>Restarts your branch from the latest <code>main</code>: stashes any local changes, hard resets your branch to <code>main</code>, then force‑pushes. Guarded to prevent running on <code>main</code>.</p>
  <pre><code class="language-bash">git fetch origin
# if dirty, stash local changes for safety
git status --porcelain | grep . && git stash push -u -m "mel reset backup @ &lt;ts&gt;" || true
git reset --hard origin/&lt;main&gt;
git push --force origin &lt;your-branch&gt;</code></pre>

  <h2 id="clear">clear</h2>
  <p>Stashes your uncommitted changes (including untracked files) without touching your branch history. Use this to get a clean working tree; you can restore later with <code>git stash pop</code>.</p>
  <pre><code class="language-bash">git stash push -u -m "mel clear @ &lt;timestamp&gt;"</code></pre>

  <h2 id="open">open</h2>
  <p>Opens the remote repository homepage in your browser. Uses your <code>origin</code> URL.</p>
  <h2 id="pr">pr</h2>
  <p>Opens a prefilled PR compare URL (GitHub) for the current branch vs <code>main</code>.</p>

  <h2 id="diff">diff</h2>
  <p>Shows staged and unstaged diff stats.</p>

  <h2 id="hooks">hooks</h2>
  <p>Optional arrays of commands that run before/after core operations. See <a href="./config.html#hooks">hooks</a>.</p>

  <h2 id="noninteractive">non‑interactive mode</h2>
  <p>Set <code>MEL_YES=1</code> or pass <code>--yes</code> to auto‑confirm prompts. Affects publishing confirmation and file‑add confirmation when <a href="./config.html#require_add_confirmation">require_add_confirmation</a> is enabled.</p>
{% endblock %}


