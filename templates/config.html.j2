{% extends "base.html.j2" %}
{% set title = "Config — mel" %}
{% set active = 'config' %}

{% block content %}
  <h1>Configuration</h1>
  <p>mel reads <code>.mel/config.json</code> at the repository root. If it’s missing, mel will create the <code>.mel</code> folder as needed. You can also provide a template (see <a href="#template">Template</a>) of defaults for anyone using the repo.</p>

  <h2>Index</h2>
  <ul>
    <li><a href="#main">main</a></li>
    <li><a href="#update_strategy">update_strategy</a></li>
    <li><a href="#scripts">scripts</a> and <a href="#allow_package_scripts">allow_package_scripts</a></li>
    <li><a href="#open_pr_on_sync">open_pr_on_sync</a>, <a href="#merge_message">merge_message</a>, <a href="#merge_message_after_sync">merge_message_after_sync</a></li>
    <li><a href="#require_publish_confirmation">require_publish_confirmation</a>, <a href="#require_add_confirmation">require_add_confirmation</a></li>
    <li><a href="#hooks">hooks</a></li>
    <li><a href="#template">Template</a></li>
  </ul>

  <h2 id="main">main</h2>
  <p>Name of your default branch. Auto‑detected as <code>main</code> or <code>master</code> if absent.</p>

  <h2 id="update_strategy">update_strategy</h2>
  <p>How mel updates your workspace branch with the latest <code>main</code> during <code>save</code>/<code>sync</code>/<code>update</code>.</p>
  <ul>
    <li><code>"rebase"</code> (default): linear history, preferred for clean logs.</li>
    <li><code>"merge"</code>: uses <code>git merge</code>; combine with <a href="#merge_message">merge_message</a> templates.</li>
  </ul>
  <pre><code class="language-json">{ "update_strategy": "rebase" }</code></pre>

  <h2 id="scripts">scripts</h2>
  <p>You can extend mel with custom commands callable via <code>mel &lt;name&gt;</code>.</p>
  <pre><code class="language-json">{
  "scripts": {
    "test": "pytest -q --disable-warnings",
    "publish-site": { "cmd": "npm run deploy", "cwd": "site", "env": { "NODE_ENV": "production" } }
  }
}</code></pre>

  <p><strong>Override built-ins with scripts</strong>: mel now checks <code>scripts</code> before built-in commands. This lets you replace a built-in like <code>publish</code> with your own flow.</p>
  <p>Example: force contributors to open a PR instead of publishing directly by overriding <code>publish</code> to run <code>mel open pr</code>:</p>
  <pre><code class="language-json">{
  "scripts": {
    "publish": "mel open pr"
  }
}</code></pre>

  <h2 id="allow_package_scripts">allow_package_scripts</h2>
  <p>If true, <code>mel &lt;name&gt;</code> falls back to your package manager when a script is not defined locally.</p>

  <h2 id="open_pr_on_sync">open_pr_on_sync</h2>
  <p>When true, after <code>mel sync</code> mel opens a prefilled PR URL (GitHub).</p>

  <h2 id="merge_message">merge_message</h2>
  <p>Template for merge commit messages when using <code>merge</code>. Supports <code>{branch}</code>, <code>{main}</code>, <code>{author}</code>, <code>{datetime}</code>. For merges triggered by <code>sync</code>, use <a href="#merge_message_after_sync">merge_message_after_sync</a>.</p>
  <pre><code class="language-json">{ "merge_message": "Merge {branch} into {main} by {author} @ {datetime}" }</code></pre>

  <h2 id="merge_message_after_sync">merge_message_after_sync</h2>
  <p>Optional template used instead of <code>merge_message</code> when the merge happens during <code>sync</code>/<code>update</code>.</p>

  <h2 id="require_publish_confirmation">require_publish_confirmation</h2>
  <p>If false, skip the confirmation prompt in <code>mel publish</code>. Default: true.</p>

  <h2 id="require_add_confirmation">require_add_confirmation</h2>
  <p>If true (default), show a list of files and require confirmation before adding them to a commit.</p>

  <h2 id="hooks">hooks</h2>
  <p>Run commands before/after key operations. Each entry can be a string or an object <code>{ cmd, cwd?, env? }</code>.</p>
  <ul>
    <li><code>pre_save</code>, <code>post_save</code></li>
    <li><code>pre_sync</code>, <code>post_sync</code></li>
    <li><code>pre_publish</code>, <code>post_publish</code></li>
  </ul>
  <pre><code class="language-json">{
  "pre_save": ["mel test"],
  "post_publish": [ { "cmd": "sh scripts/notify.sh", "env": { "CHANNEL": "#deploys" } } ]
}</code></pre>

  <h2 id="template">Template</h2>
  <p>You can provide a template config at <code>.mel/config_template.json</code> (repo) or <code>~/.mel/config_template.json</code> (user). On first run, mel will import it to <code>.mel/config.json</code> if none exists.</p>

  <h2>Example</h2>
  <p>In this example, we're setting the default branch to <code>main</code>, using <code>rebase</code> for updates, and opening a PR on sync. We're also defining a test script and a build script.</p>
  <p>We're also defining two extra script commands that will allow users to run <code>mel test</code> and <code>mel build</code>.</p>
  <p>Package manager scripts are also enabled here, so users can run package scripts with: <code>mel &ltpackage-script-name&gt</code>. For example, <code>mel build</code> will run <code>npm run dev</code>.</p>
  <pre><code class="language-json">{
  "main": "main",
  "update_strategy": "rebase",
  "open_pr_on_sync": true,
  "merge_message": "Merge {branch} into {main} by {author} @ {datetime}",
  "scripts": {
    "test": "pytest -q --disable-warnings",
    "build": "npm run build -s"
  },
  "allow_package_scripts": true,
  "require_add_confirmation": true
}</code></pre>

  <h2>Non‑interactive mode</h2>
  <p>For automation, set <code class="language-bash">MEL_YES=1</code> (or pass <code>--yes</code>) to answer “yes” to confirmations and choose safe defaults.</p>
{% endblock %}


